<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:wfw="http://wellformedweb.org/CommentAPI/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:slash="http://purl.org/rss/1.0/modules/slash/" version="2.0">
  <channel>
    <title>My RSS Feed</title>
    <link>http://localhost:3000/</link>
    <atom:link href="http://localhost:3000/feed.rss" rel="self" type="application/rss+xml"/>
    <description></description>
    <lastBuildDate>Sat, 01 Jul 2023 22:30:29 GMT</lastBuildDate>
    <language>en</language>
    <generator>Lume v1.17.5</generator>
    <item>
      <title>Deno and Lume</title>
      <link>http://localhost:3000/thoughts/deno_and_lume/</link>
      <guid isPermaLink="false">http://localhost:3000/thoughts/deno_and_lume/</guid>
      <description>Talking about my first experience with Deno and using Lume to replace my Hugo static site. My future plans with Deno, and why I&apos;ll still be writing Python and PowerShell.</description>
      <content:encoded>
        <![CDATA[<h1>First Experiences with Deno and Lume</h1>
        <p>Deno is awesome. Lume is pretty great.</p>
        <p>I'm in the process of building out a new static site with Lume, which is easy once you grok the design choices, and porting over everything I wrote under my last Hugo blog. This is where I really like markdown based static sites, a bit of copy/paste and update a few links and you're all set. I don't even want to think about all the wordpress and ghost sites I have decommissioned over time, and how much history lost (though I have the backups, I'm too lazy to merge it from json exports).</p>
        ]]>
      </content:encoded>
      <pubDate>Sun, 02 Jul 2023 00:00:00 GMT</pubDate>
    </item>
    <item>
      <title>keyboardcrunch - blog posts</title>
      <link>http://localhost:3000/posts/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<div class="centered-index">
        <h1>Posts</h2>
        <ul>
        
        <li><a href="http://localhost:3000/posts/finding-some-inspiration/">2022-11-11 - Finding Some Inspiration</a>
        
        <li><a href="http://localhost:3000/posts/hacking_better_sentinelone/">2022-03-26 - Hacking a Better SentinelOne</a>
        
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/">2021-04-15 - Recommended SentinelOne Custom Detections</a>
        
        <li><a href="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/">2021-03-31 - SCCM Baselines for SentinelOne</a>
        
        <li><a href="http://localhost:3000/posts/fun-with-wireguard/">2021-03-30 - Fun With Wireguard</a>
        
        <li><a href="http://localhost:3000/posts/email-security/">2021-01-30 - Email Security</a>
        
        </ul>
        </div>]]>
      </content:encoded>
      <pubDate>Sat, 01 Jul 2023 18:56:16 GMT</pubDate>
    </item>
    <item>
      <title>keyboardcrunch</title>
      <link>http://localhost:3000/</link>
      <guid isPermaLink="false">http://localhost:3000/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<div class="about-section">
        <!-- About Me -->
        <div class="about-text">
        <h2 class="">About Me</h2>
        <p>
        For the last 7+ years I've been a security engineer. My primary focus has been the management of endpoint security tooling, 
        detection engineering, desktop software and SaaS reviews, and some "light" adversary emulation work.
        </p>
        <p>
        I'm currently working at SpaceX but previously I was a security engineer at Woodforest National Bank (11 years!) and <i>the</i> system 
        administrator for a small start-up building an encrypted file sharing and chat application.
        </p>
        <p class="">
        My interests outside of work are varied and I'm never without a project.
        <ul>
        
        <li>cycling: mtb, trail</li>
        
        <li>brewing: beer, mead</li>
        
        <li>code: python, powershell, deno/typescript</li>
        
        <li>self-hosting &amp; homelab</li>
        
        </ul>
        <p>
        </div>
        <!-- Links -->
        <div class="about-links">
        <p class="">You can find me on the following platforms:</p>
        <ul>
        
        <li><a href="https://twitter.com/keyboard_crunch">Twitter</a></li>
        
        <li><a href="https://fosstodon.org/@keyboardcrunch">Mastodon</a></li>
        
        <li><a href="https://github.com/keyboardcrunch">GitHub</a></li>
        
        </ul>
        </div>
        </div>
        
        <div class="post-section">
        <!-- Blog Posts -->
        <div class="column">
        <h2><a href="http://localhost:3000/posts/">Posts</a></h2>
        <ul>
        
        <li><a href="http://localhost:3000/posts/finding-some-inspiration/">Finding Some Inspiration</a></li>
        
        <li><a href="http://localhost:3000/posts/hacking_better_sentinelone/">Hacking a Better SentinelOne</a></li>
        
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/">Recommended SentinelOne Custom Detections</a></li>
        
        <li><a href="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/">SCCM Baselines for SentinelOne</a></li>
        
        <li><a href="http://localhost:3000/posts/fun-with-wireguard/">Fun With Wireguard</a></li>
        
        <li><a href="http://localhost:3000/posts/email-security/">Email Security</a></li>
        
        </ul>
        </div>
        
        <!-- Micro-blogging -->
        <!-- May want to list date - shortname (meta), because title could be long-->
        <div class="column">
        <h2><a href="http://localhost:3000/thoughts/">Thoughts</a></h2>
        <ul>
        
        <li><a href="http://localhost:3000/thoughts/deno_and_lume/">2023-07-01  - Deno and Lume</a></li>
        
        </ul>
        </div>
        
        <!-- Good Reads -->
        <!-- Need to figure out presentation of bookmarks/links and the data-source 
        <div class="column">
        <h2><a href="http://localhost:3000/thoughts/">Good Reads</a></h2>
        <ul>
        
        <li><a href="http://localhost:3000/thoughts/deno_and_lume/">Deno and Lume</a></li>
        
        </ul>
        </div>
        -->
        </div>
        ]]>
      </content:encoded>
      <pubDate>Sat, 01 Jul 2023 18:56:16 GMT</pubDate>
    </item>
    <item>
      <title>keyboardcrunch - micro-blog</title>
      <link>http://localhost:3000/thoughts/</link>
      <guid isPermaLink="false">http://localhost:3000/thoughts/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<!-- We should probably treat this like a micro-blog, show date - title - content (maybe auto-collapse box) -->
        
        <div class="centered-index">
        <h1>Thoughts</h2>
        <ul>
        
        <li>
        <a href="http://localhost:3000/thoughts/deno_and_lume/">July 1st, 2023 - Deno and Lume</a>
        <p>Talking about my first experience with Deno and using Lume to replace my Hugo static site. My future plans with Deno, and why I'll still be writing Python and PowerShell.</p>
        </li>
        
        </ul>
        </div>]]>
      </content:encoded>
      <pubDate>Sat, 01 Jul 2023 18:56:16 GMT</pubDate>
    </item>
    <item>
      <title>Finding Some Inspiration</title>
      <link>http://localhost:3000/posts/finding-some-inspiration/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/finding-some-inspiration/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>It's been a few years since I'd actively used Mastodon but with the recent flood of users to the fediverse I figured I'd give it another shot, this time creating a profile on fosstodon. While this isn't a post about Mastodon I found a ton of inspiration seeing so many creative folks doing interesting things.</p>
        <p>Simon Willison... I love the format of his <a href="https://github.com/simonw/">GitHub readme</a>, the live updates of Github activity, blog posts, and TIL's, and the TILs!!! I'd been thinking about using ActivityPub/Plermo/Mastodon to essentially micro-blog short bits of things I learned to track them like notes on a public scale but <a href="https://github.com/simonw/til">TIL</a> is awesome! My approach I decided to take a bit differently, at least until I can figure out how I want to post my TIL items. I have a <a href="https://github.com/go-shiori/shiori">Shiori</a> bookmark server (which has a very very limited and goofy API that only returns 30 items, no pagination, no filters) so it's like a &quot;what I'm reading&quot; feed. So with some Python and Flask, ripping a free HTML5 template off the interwebz, and putting together a single page site that lists GitHub activity, Blog Posts, and Bookmarks/Recently Read. I wanted this to be hosted on DigitalOcean as a web function but it needs clean-up and performance tweaks before I can get there, but it's working and running on <a href="https://keyboardcrunch.com/">keyboardcrunch.com</a>.</p>
        <p><video src="http://localhost:3000/posts/finding-some-inspiration/site_preview.mp4" type="video/mp4" preload="auto" controls="controls"></video></p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 12 Nov 2022 00:28:44 GMT</pubDate>
    </item>
    <item>
      <title>Hacking a Better SentinelOne</title>
      <link>http://localhost:3000/posts/hacking_better_sentinelone/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/hacking_better_sentinelone/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>One of my few frustrations with modern EDR tooling are that most all of them have thrown out one of the most useful features of the legacy anti-virus, scanning of USB drives. They're a vector for malicious files onto the network, files that could migrate to other places in your network before they're ever analyzed, and this can possibly be an issue with compliance regulations (or at least a frustrated CISO as I experienced). So cool, USB content is ignored until it's written somewhere else... Guess what? EDR's like Crowdstrike and SentinelOne don't do on-write scanning for SMB/NFS (usually just on-execute). Now if you work with a lot of vendors with software, firmware, and documents then you'll know it's best to get those off USB and onto a network share. So let's abuse a feature of SentinelOne to add on-connect USB device scanning.</p>
        <h3>The Lead</h3>
        <p>Within the SentinelOne /docs we can see that the Sentinel Agent implements a COM server with a few methods that can be used to create a custom application (like a tray application). The documentation mostly makes references to threat and infected status, and the documentation and sample code provided is lacking. So let's just start digging here.</p>
        <h3>James Forshaw's OleView</h3>
        <p>Since we know the Program ID to investigate, <a href="https://github.com/tyranid/oleviewdotnet">OleView</a> is a good place to start. We start by navigating to the &quot;Prog IDs&quot; section under the Registry menu. The documentation references <code>SentinelAgent.1</code>, so let's start by opening the Type Library of ISentinelAgent (as it's the most obvious).</p>
        <p><img src="http://localhost:3000/posts/hacking_better_sentinelone/OleView_SentinelAgent1.png" alt="OleView SentinelAgent.1"></p>
        <p><img src="http://localhost:3000/posts/hacking_better_sentinelone/OleView_DSentinelAgentEvents.png" alt="OleView SentinelAgentLibrary"></p>
        <h3>Prototyping Some Code</h3>
        <p>Above, we can see that DSentinelAgentEvents exposes a few methods, the one we care about happens to be the <code>OnDeviceControlEvent</code> which looks to spit out a Json object. So let's prototype some Python code using <a href="https://pypi.org/project/pywin32/">pywin32</a> that will connect a COM client to SentinelAgent.1 and dump a Device Control event.</p>
        <pre><code class="language-python">import json
        import win32api
        import win32com
        import win32com.client
        import pythoncom
        
        class AgentEvents:
        def OnDeviceControlEvent(self, event):
        device_event = json.loads(event)
        print(json.dumps(device_event), indent=4, sort_keys=True) # print the event
        
        agent = win32com.client.DispatchWithEvents(&quot;SentinelAgent.1&quot;, AgentEvents)
        pythoncom.PumpMessages()
        </code></pre>
        <p>Below are the results we get for a USB connection.</p>
        <pre><code class="language-json">{
        &quot;deviceClass&quot;: 8,
        &quot;deviceName&quot;: &quot;SanDisk Cruzer Blade&quot;,
        &quot;eventId&quot;: &quot;{96e5a854-abb7-11ec-ba75-000c29ad0249}&quot;,
        &quot;eventType&quot;: &quot;connected&quot;,
        &quot;interface&quot;: &quot;USB&quot;,
        &quot;productId&quot;: 21863,
        &quot;ruleId&quot;: &quot;-1&quot;,
        &quot;serialId&quot;: &quot;4C530110050104113372&quot;,
        &quot;timestamp&quot;: &quot;2022-03-24T21:19:00.894+00:00&quot;,
        &quot;vendorId&quot;: 1921
        }
        </code></pre>
        <p>A little unfortunate that it doesn't contain the drive letter or mount path, but we can at least piggyback off this connection event, and we can see a way forward for filtering on events to just Class=8 (mass storage) and Type=connected; we could even filter out trusted USB devices by <code>serialId</code> if we wanted to.</p>
        <p>Let's add <code>win32file</code> to our imports and just do a bit of drive enumeration.</p>
        <pre><code class="language-python">if device_event[&quot;eventType&quot;] == &quot;connected&quot; and device_event[&quot;deviceClass&quot;] == 8:
        drives = win32api.GetLogicalDriveStrings().split('\x00')[:-1]
        for device in drives:
        drive_type = win32file.GetDriveType(device)
        if drive_type == win32file.DRIVE_REMOVABLE:
        print(&quot;We need to scan the %s drive&quot;, device)
        </code></pre>
        <h3>Scanning the Drive</h3>
        <p>So now we have some basic code that will run and wait for a USB device connection, if it's a 'connected' event for a removable storage drive it'll print out <em>&quot;We need to scan the X:\ drive&quot;</em>. So let's figure out how we'll trigger the scan. We know we can scan files or folders using SentinelCtl commands (we are good SentinelOne administrators), and with a bit of testing we can confirm that it doesn't require administrative priviledges to initiate a scan, so our problem is locating the binary.</p>
        <p>My first swing at this uses yet more Sentinel COM hackery, as I know that <code>SentinelHelper.1</code> has a <code>GetAgentStatusJSON</code> method that will return a bunch of information about the agent. The downside, it requires administrative priviledges, so we'll need to find a better method later.</p>
        <p><img src="http://localhost:3000/posts/hacking_better_sentinelone/OleView_ISentinelHelper.png" alt="OleView SentinelHelper"></p>
        <p>We really just want the full path to the SentinelCtl.exe binary, so we need to grab the currently installed agent version to know the path. And since we have the device drive/mount path as the <code>device</code> variable, we can just mock up the full execution of the scan. It's good to test this to see if we'll have any pop-up from the agent for these scans.</p>
        <pre><code class="language-python">import win32com
        import win32file
        import subprocess
        
        # Find the running agent version and craft full path for SentinelCtl.exe
        agent_com = win32com.client.Dispatch(&quot;SentinelHelper.1&quot;).GetAgentStatusJSON()
        agent_info = json.loads(agent_com)
        sentinelctl = &quot;C:\Program Files\SentinelOne\Sentinel Agent %s\SentinelCtl.exe&quot; % agent_info[&quot;agent-version&quot;]
        
        # Execute SentinelCtl.exe scan_folder -i device
        scan_status = subprocess.run([sentinelctl, 'scan_folder', '-i', device], stdout=subprocess.PIPE).stdout.decode('utf-8')
        </code></pre>
        <p>Testing this I saw no pop-ups or activity from the tray icon, and the scan_status simply states that the scan was initiated. So what if a scan was already running, well... sadly a new scan request will fail, but SentinelCtl provides a <code>is_scan_in_process</code> command that will state <em>&quot;Scan is in progress&quot;</em> if one is already going, so maybe our end code should kill any running scans?</p>
        <h3>The Prototype</h3>
        <p>With the above code we can successfully monitor for new USB mass storage devices being connected, and initiate a scan with SentinelCtl on that drive, while handling some specific behavior regarding running scans. <a href="https://github.com/keyboardcrunch/sentinelone_usbscan/blob/main/usbscan.py">usbscan.py</a> is just a quick proof of concept, but I've thrown in some logging and the ability to run completely without any administrative priviledges. I won't cover it here, but next steps are to compile and sign a Windows binary and install it as a low priviledged service.</p>
        ]]>
      </content:encoded>
      <pubDate>Sat, 26 Mar 2022 17:43:36 GMT</pubDate>
    </item>
    <item>
      <title>Recommended SentinelOne Custom Detections</title>
      <link>http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<h2>Deep Visibility</h2>
        <p>SentinelOne Deep Visibility has a very powerful language for querying on nearly any endpoint activity you'd want to dig up. I've been using the Watchlist feature very heavily; from detecting common phishing Url patterns, unapproved software, insider threats, to LOLBAS activity. But very soon the Watchlist feature will be superseded by Custom Detections, basically Watchlist with ranking and remediation options.</p>
        <p>The purpose of this post is to document a few top priority queries that go beyond the granular queries I've created and shared before. The queries shared here will attempt to cover a number of sub-techniques within a single query to reduce the number of saved queries required in the console. This may result in some possibly crazy looking queries but I've attempted to format them in a logical manner that you can take from them what you will.</p>
        <p><em>I must note that I write a lot of these queries late at night, console up on one monitor and a VM for executing Atomic Red Team up on another. With that said, there may be a few copy/paste or format mistakes, but I'm treating this as a live document and will maintain it for a few months.</em></p>
        <h2>Tactics and Techniques</h2>
        <p>Below I have compiled 8 techniques covering more than 12 sub-techniques (12 queries total), and attempted to document the sub-techniques covered and purpose of the queries. The goal was to add to or fill gaps with SentinelOne detections.</p>
        <p><em>I'm aware that the theme for this site changes code blocks to full caps, but copy/paste formatting should be the same. If you experience otherwise please copy these queries from the <a href="https://github.com/keyboardcrunch/keyboardcrunch.github.io/blob/master/content/posts/Recommended-SentinelOne-Custom-Detections.md">markdown copy</a>.</em></p>
        <ul>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1003-os-credential-dumping">T1003 OS Credential Dumping</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1053-scheduled-taskjob">T1053 Scheduled Task/Job</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1562-impair-defenses">T1562 Impair Defenses</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1059-command-and-scripting-interpreter">T1059 Command and Scripting Interpreter</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1218-signed-binary-proxy-execution">T1218 Signed Binary Proxy Execution</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1482-domain-trust-discovery">T1482 Domain Trust Discovery</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1548002-abuse-elevation-control-mechanism">T1548.002 Abuse Elevation Control Mechanism</a></li>
        <li><a href="http://localhost:3000/posts/Recommended-SentinelOne-Custom-Detections/#t1027004-compile-after-delivery">T1027.004 Compile After Delivery</a></li>
        </ul>
        <h3>T1003 OS Credential Dumping</h3>
        <p><strong>Tactic:</strong>  Credential Access</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1003/">https://attack.mitre.org/techniques/T1003/</a></p>
        <p><strong>Sub-Techniques:</strong> T1003.001 LSASS Memory, T1003.003 NTDS</p>
        <p><strong>Description:</strong> Credential theft being the ultimate goal before moving on to lateral movement, the below sub-techniques are commonly observed by actors and go beyond the general detections.</p>
        <p><strong>Query:</strong></p>
        <pre><code>( TgtProcImageSha1 = &quot;f0c52cea19c204f5cdbe952cc7cfc182e20d8d43&quot; OR TgtProcCmdline ContainsCIS &quot;-ma lsass.exe&quot; OR TgtProcCmdline RegExp &quot;(?i)comsvcs.dl.*(minidump)&quot; OR TgtFilePath = &quot;C:\Windows\Temp\dumpert.dmp&quot; OR TgtFilePath RegExp &quot;^.*lsass.*.DMP&quot; OR (SrcProcCmdline ContainsCIS &quot;sekurlsa::minidump&quot; OR SrcProcCmdline ContainsCIS &quot;sekurlsa::logonpasswords&quot;) OR SrcProcCmdline ContainsCIS &quot;live lsa&quot; )
        OR
        ( SrcProcCmdline RegExp &quot;^.*copy.*\\Windows\\NTDS\\NTDS.dit.*&quot; OR SrcProcCmdline RegExp &quot;^.*copy.*\\Windows\\System32\\config\\SYSTEM .*&quot; OR SrcProcCmdline ContainsCIS &quot;save HKLM\SYSTEM&quot; OR (TgtProcName = &quot;ntdsutil.exe&quot; AND TgtProcCmdline ContainsCIS &quot;ac i ntds&quot;) )
        </code></pre>
        <h3>T1053 Scheduled Task/Job</h3>
        <p><strong>Tactic:</strong>  Execution, Persistence, Privilege Escalation</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1053/">https://attack.mitre.org/techniques/T1053/</a></p>
        <p><strong>Sub-Techniques:</strong> T1053.002 Windows AT, T1053.005 Scheduled Task</p>
        <p><strong>Description:</strong> Common in the persistence stage of attacks is the scheduling of tasks. Combined into a single query is the detection of the two most common sub-techniques, AT command and scheduled tasks.</p>
        <p><strong>Query:</strong></p>
        <pre><code>( TgtProcName = &quot;at.exe&quot; AND TgtProcCmdLine ContainsCIS &quot;/interactive &quot; )
        OR
        ( ( ( TgtProcName = &quot;schtasks.exe&quot; AND TgtProcCmdLine ContainsCIS &quot;/create&quot; ) OR ( SrcProcCmdLine ContainsCIS &quot;New-ScheduledTask&quot; OR SrcProcCmdScript  ContainsCIS &quot;New-ScheduledTask&quot; ) ) AND SrcProcParentName Not In (&quot;services.exe&quot;, &quot;OfficeClickToRun.exe&quot; ) AND ObjectType != &quot;cross_process&quot; )
        </code></pre>
        <h3>T1562 Impair Defenses</h3>
        <p><strong>Tactic:</strong> Defense Evasion</p>
        <p><strong>Platforms:</strong> Windows, Linux</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1562/">https://attack.mitre.org/techniques/T1562/</a></p>
        <p><strong>Description:</strong> It's not uncommon for attackers to take actions to blind defenders and one of the easiest and most common is to disable system logging, turning off the firewall, or disabling Windows security features. Below I've broken out three queries that focus on detecting those attacks, and each of those queries is broken up logically by OR statements that could be used separately. Threre are so many detections to be built out for T1562, especially <a href="https://github.com/redcanaryco/atomic-red-team/blob/master/atomics/T1562.001/T1562.001.md">T1562.001</a> That I recommend you dig deeper into this.</p>
        <h4>T1562.001 Disable Logging</h4>
        <p><strong>Description:</strong> In order, this script detects the disabling of Syslog and two methods of disabling Sysmon logging.</p>
        <pre><code>( TgtProcName In Contains ( &quot;service&quot;, &quot;chkconfig&quot;, &quot;systemctl&quot; ) AND TgtProcCmdLine In Contains ( &quot;rsyslog stop&quot;, &quot;off rsyslog&quot;, &quot;stop rsyslog&quot;, &quot;disable rsyslog&quot; ) )
        OR
        ( TgtProcName = &quot;fltmc.exe&quot; AND TgtProcCmdLine ContainsCIS &quot;unload SysmonDrv&quot; )
        OR
        ( TgtProcName = &quot;sysmon.exe&quot; AND TgtProcCmdLine ContainsCIS &quot;-u&quot; )
        </code></pre>
        <h4>T1562.001 Disable Security</h4>
        <p><strong>Description:</strong> The below query will detect disabling of AMSI providers or the disabling of Excel security features.</p>
        <pre><code>( RegistryPath ContainsCIS &quot;\Microsoft\AMSI\Providers&quot; AND EventType In ( &quot;Registry Key Delete&quot;, &quot;Registry Value Delete&quot; ) )
        OR
        ( RegistryKeyPath ContainsCIS &quot;Excel\Security&quot; OR RegistryKeyPath ContainsCIS &quot;Excel\Security\ProtectedView&quot;) AND RegistryKeyPath In Contains Anycase ( &quot;VBAWarnings&quot;,&quot;DisableInternetFilesInPV&quot;,&quot;DisableUnsafeLocationsInPV&quot;,&quot;DisableAttachementsInPV&quot; ) AND EventType In ( &quot;Registry Value Create&quot;,&quot;Registry Value Modified&quot; ) )
        </code></pre>
        <h4>T1562.004 Tamper with Firewall</h4>
        <p><strong>Description:</strong> In order, the below query will detect the disable of the Windows firewall followed by methods for disabling the Linux firewall.</p>
        <pre><code>( TgtProcName = &quot;netsh.exe&quot; AND TgtProcCmdLine ContainsCIS &quot;state off&quot; )
        OR
        ( SrcProcName In Contains (&quot;service&quot;,&quot;chkconfig&quot;) AND SrcProcCmdLine In Contains (&quot;off&quot;,&quot;stop&quot;) AND SrcProcCmdLine ContainsCIS &quot;tables&quot;) OR (TgtProcName = &quot;systemctl&quot; AND TgtProcCmdLine In Contains (&quot;stop&quot;,&quot;disable&quot;) AND TgtProcCmdLine Contains &quot;firewalld&quot; )
        </code></pre>
        <h3>T1059 Command and Scripting Interpreter</h3>
        <p><strong>Tactic:</strong> Execution</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1059/">https://attack.mitre.org/techniques/T1059/</a></p>
        <p><strong>Description:</strong> Attackers often abuse the command and script interpreters already present on systems to execute malicious code. For relevance and fidelity I've broken detections out into detecting two different common methods, execution of scripts from temp directories and Powershell download cradles.</p>
        <h4>T1059.001 Powershell Download Cradles</h4>
        <p><strong>Description:</strong> There are many methods for initiating a file download with Powershell, and a few obscure ways of executing Powershell, so here we're focusing on the command strings for detection.</p>
        <pre><code>ProcessCmd In Contains Anycase  ( &quot;Net.WebClient&quot;, &quot;(iwr&quot;, &quot;DownloadString(&quot;, &quot;WinHttp.WinHttpRequest&quot;  , &quot;IEX &quot;, &quot;| IEX&quot;, &quot;InternetExplorer.Application&quot;, &quot;Msxml2.XMLHTTP&quot;, &quot;DownloadString(&quot; )
        </code></pre>
        <h4>T1059 Execution from Temp Directories</h4>
        <p><strong>Sub-Techniques:</strong> T1059.003 Windows Command Shell, T1059.005 Visual Basic</p>
        <p><strong>Description:</strong> The below will detect either cscript or cmd executing a bat or vbs from any Temp directory, regardless of case.</p>
        <pre><code>SrcProcName In ( &quot;cscript.exe&quot;, &quot;cmd.exe&quot; ) AND SrcProcCmdLine RegExp &quot;(?i)\bTemp\b.*\.(bat|vbs)&quot; AND SrcProcParentName != &quot;msiexec.exe&quot;
        </code></pre>
        <h3>T1218 Signed Binary Proxy Execution</h3>
        <p><strong>Tactic:</strong> Execution</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1218/">https://attack.mitre.org/techniques/T1218/</a></p>
        <p><strong>Description:</strong>
        Signed binary proxy execution is a method for bypassing standard defenses through execution of malicious content by signed binaries. I've decided to build these out as two queries, focusing on execution of scripts and remote content, because the other sub-techniques are require a lot of environment specific tuning.</p>
        <h4>T1218 Script Execution</h4>
        <p><strong>Sub-Techniques:</strong> T1218.005 Mshta, T1218.011 Rundll32</p>
        <pre><code>SrcProcName In ( &quot;mshta.exe&quot;, &quot;rundll32.exe&quot; ) and SrcProcCmdLine In Contains Anycase ( &quot;javascript:&quot;, &quot;vbscript:&quot;, &quot;wscript.shell&quot;, &quot;env:appdata&quot;, &quot;script:&quot;, &quot;mshtml,RunHTMLApplication&quot; )
        </code></pre>
        <h4>T1218 with Remote Payload</h4>
        <p><strong>Sub-Techniques:</strong> T1218.001 Compiled HTML, T1218.005 Mshta, T1218.007, T1218.010 Regsvr32, T1218.011 Rundll32</p>
        <p><strong>Description:</strong> The below query will detect execution of payloads with remote content (urls) in the command line.</p>
        <p><strong>Query:</strong></p>
        <pre><code>SrcProcName In( &quot;mshta.exe&quot;, &quot;hh.exe&quot;, &quot;regsvr32.exe&quot;, &quot;rundll32.exe&quot;, &quot;msiexec.exe&quot; ) AND SrcProcCmdLine RegExp &quot;https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&amp;\/\/=]*)&quot;
        </code></pre>
        <h3>T1482 Domain Trust Discovery</h3>
        <p><strong>Tactic:</strong> Discovery</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1482/">https://attack.mitre.org/techniques/T1482/</a></p>
        <p><strong>Description:</strong>
        The below query will detect domain trust enumeration/discovery through the execution of Nltest, dsquery, AdFind, and Powershell AD modules (in order).</p>
        <p><strong>Query:</strong></p>
        <pre><code>( TgtProcName = &quot;nltest.exe&quot; AND ( TgtProcCmdLine ContainsCIS &quot;domain_trusts&quot; OR TgtProcCmdLine ContainsCIS &quot;all_trusts&quot; OR TgtProcCmdLine ContainsCIS &quot;dclist&quot; ))
        OR
        ( TgtFileInternalName ContainsCIS &quot;AdFind&quot; AND ( TgtProcCmdLine ContainsCIS &quot;trustdmp&quot; OR TgtProcCmdLine ContainsCIS &quot;-f \&quot;(objectcategory=&quot;) )
        OR
        ( ProcessCmd ContainsCIS &quot;Get-NetForestTrust&quot; OR ProcessCmd ContainsCIS &quot;Get-NetDomainTrust&quot; )
        </code></pre>
        <h3>T1548.002 Abuse Elevation Control Mechanism</h3>
        <p><strong>Tactic:</strong> Privilege Escalation, Defense Evasion</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1548/">https://attack.mitre.org/techniques/T1548/</a></p>
        <p><strong>Description:</strong> Elevation control mechanisms such as Windows UAC are often abused to elevate privileges. The below query will detect a few of these techniques, though the methods of UAC bypass are consistently expanding.</p>
        <p><strong>Query:</strong></p>
        <pre><code>( SrcProcCmdLine ContainsCIS &quot;\shell\open\command&quot; AND SrcProcCmdLine RegExp &quot;(?i).*(cmd.exe|fodhelper.exe|ComputerDefaults.exe|sdclt.exe)&quot; AND ObjectType = &quot;process&quot; ) OR ( SrcProcCmdLine ContainsCIS &quot;C:\Windows \S&quot; AND ObjectType != &quot;registry&quot; )
        </code></pre>
        <h3>T1027.004 Compile After Delivery</h3>
        <p><strong>Tactic:</strong> Defense Evasion</p>
        <p><strong>Platforms:</strong> Windows</p>
        <p><strong>Reference:</strong> <a href="https://attack.mitre.org/techniques/T1027/004/">https://attack.mitre.org/techniques/T1027/004/</a></p>
        <p><strong>Description:</strong> Transfer and compilation of source code is often the easiest way to bypass over-the-wire detections as well as reducing detections. The below query will detect execution by csc or msbuild, limited by compilation with either target or output arguments.</p>
        <p><strong>Query:</strong></p>
        <pre><code>SrcProcName In ( &quot;csc.exe&quot;, &quot;msbuild.exe&quot; ) AND TgtFileIsExecutable IS TRUE AND ( SrcProcCmdLine RegExp &quot;(?i).*\/t.*:.*&quot; OR SrcProcCmdLine RegExp &quot;(?i).*\/o.*:.*exe&quot; )
        </code></pre>
        ]]>
      </content:encoded>
      <pubDate>Fri, 16 Apr 2021 00:16:38 GMT</pubDate>
    </item>
    <item>
      <title>SCCM Baselines for SentinelOne</title>
      <link>http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>After a recent deployment to upgrade our SentinelOne agents I noticed a few unusual issues with agents; Agents offline in console, unresponsive agent module in Sentinelctl, SentinelAgent Windows service stuck in starting state. This may be specific to my organization's environment, or our deployment method, but may also be due to changes to Anti-Tamper that restrict the use of 3rd party deployment tools through agents 4.6.2 - 4.6.12. On these systems the <code>SentinelCtl.exe status</code> command told me everything I needed to know, where the Agent Health and Required Actions categories within the Console didn't reflect any problems. So I set out to create baselines within Microsoft Configuration Manager so that we could keep an eye out for these issues.</p>
        <p><em>I feel it's necessary to mention that the issues described above are not a normal occurance, I'd never seen these issues myself with previous agent versions, and that our issues were resolved by either upgrading and rebooting or doing clean installs on systems that had been upgraded using SCCM when Anti-Tamper protection explicitly prevented it (causing corrupted agent installation).</em></p>
        <p><em><strong>Update 4/5/2021:</strong> Added a compliance script for <a href="https://gist.github.com/keyboardcrunch/5da6b14a299c7c78c0699613fe7e27bb">evaluating systems</a> that haven't rebooted since a SentinelOne Agent install or upgrade.</em></p>
        <h2>Creating the Configuration Item</h2>
        <h3>Step 1 - Create the CI</h3>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/CI_1_New_CI.png" alt="New Compliance Item"></p>
        <h3>Step 2 - Create a New Setting</h3>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/CI_2_New_Setting.png" alt="New CI Setting"></p>
        <h3>Step 3 - Edit the Discovery Script</h3>
        <p>Next step is to edit the Discovery Script. My method was to detect the installed version of SentinelOne by enumerating the Win32Reg_AddRemovePrograms WMI object so we know the execution path for SentinelCtl for running the <code>./SentinelCtl.exe status</code> command, where we then parse the output. <em>You may want to uncomment the final block validating tamper protection. I had it turned off for an SCCM deployment and to make repairing corrupted installs a bit easier.</em></p>
        <p>You can find my Powershell script <a href="https://gist.github.com/keyboardcrunch/6c2451815eb48c42bc3efbc01a809a9d">here</a>.</p>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/CI_3_Settings_Edit_Discovery_Script.png" alt="Edit Discovery Script"></p>
        <h3>Step 4 - New Compliance Rule</h3>
        <p>The rule evaluates the data returned from the script, and the script is returning a simple Boolean value for overall compliance (It isn't telling you which component is out of compliance).</p>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/CI_4_Settings_New_Compliance_Rule.png" alt="New Compliance Rule"></p>
        <h2>Creating the Configuration Baseline</h2>
        <h3>Step 1 - Create a New Baseline</h3>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/BL_1_New_Baseline.png" alt="Edit Discovery Script"></p>
        <h3>Step 2 - Add the Previous Configuration Item</h3>
        <p>Here we're just adding the previously created Configuration Item to tell the Baseline what to evaluate.</p>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/BL_2_Add_CI_For_Eval.png" alt="Add Configuration Item"></p>
        <h3>Step 3 - Deploy the Baseline</h3>
        <p>This will look different when created through the wizard workflow, but in this step you're just creating a deployment to any device collection you wish. I have a separate collection for devices missing the SentinelOne agent, so I'm only deploying this baseline to a collection of systems with SentinelOne installed, running evaluation every 6 hours (personal preference), and in Monitor mode since remediation would be too complex to automate with anti-tamper and per-agent passwords.</p>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/BL_3_Deploy_Settings.png" alt="Deploy the Baseline"></p>
        <h4>Step 4 - Create a Non-Compliant Collection (optional)</h4>
        <p>This step is completely optional, but you can right-click on any baseline deployment and create a collection of Non-Compliant systems (and it will refresh depending on the collection settings). This is useful for reporting, but you could always review results from the Monitoring tab of SCCM.</p>
        <p><img src="http://localhost:3000/posts/SCCM_Baseline_For_SentinelOne/BL_4_Create_Collection_From_NonCompliant.png" alt="Edit Discovery Script"></p>
        <h2>Wrap-up</h2>
        <p>I just want to add a final disclaimer that this may be completely unnecessary but I have found it necessary for discovering corrupted agent installs, and it has come in handy in verifying test deployments of agent upgrades as I've noticed (rare) instances of upgraded agents going offline after becoming unresponsive 12hrs-days after upgrade where they just needed to reboot after upgrade.</p>
        <p>Additionally, with a little bit of work the above Powershell script could be repurposed to dump granular configuration data with SentinelCtl for validation of Policy Override settings or even Management Connection status.</p>
        <p>I've also started reviewing my environment for systems that haven't rebooted since SentinelOne Agent upgrade or installs with <a href="https://gist.github.com/keyboardcrunch/5da6b14a299c7c78c0699613fe7e27bb">this script</a>, because there have been instances where these types of systems have been missing EDR data or failed remediation/kill tasks for one reason or another.</p>
        ]]>
      </content:encoded>
      <pubDate>Thu, 01 Apr 2021 00:10:01 GMT</pubDate>
    </item>
    <item>
      <title>Fun With Wireguard</title>
      <link>http://localhost:3000/posts/fun-with-wireguard/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/fun-with-wireguard/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>After a recent conversation I realized that some folks have a narrow view of what can be done
        with Wireguard, and VPN connections in general. Though recently a number of toolsets/frameworks
        tailored for networking of containers or &quot;bolt on zero-trust&quot; networking have expanded that
        perception. My goal with this post is to highlight some software leveraging Wireguard, and to
        list a few different use-cases and reasons for using Wireguard (over traditional VPN or
        ZeroTier).</p>
        <h2>Use Cases</h2>
        <ul>
        <li>Meshed networking of disparate peers.</li>
        <li>Exposing internal network applications to the internet without port forwarding.</li>
        <li>Exposing web apps with a reverse proxy to Wireguard network clients.</li>
        <li>Point-to-point VPN for connected sites.</li>
        <li>Non-forwarded Wireguard connection for LAN gaming and resource sharing.</li>
        <li>Resilient VPN for mobile devices, capable of handling network hopping.</li>
        </ul>
        <h2>Software Leveraging Wireguard</h2>
        <h3>Innernet</h3>
        <p><a href="https://blog.tonari.no/introducing-innernet">innernet</a> is an opensource alternative to Tailscale
        or ZeroTier that can create a secure networks with minimal management overhead.</p>
        <h3>Tailscale</h3>
        <p><a href="https://tailscale.com/">Tailscale</a> is a zero config VPN with firewall rule management, allowing
        for a secure network layer on top of existing infrastructure.</p>
        <h3>Firezone</h3>
        <p><a href="https://github.com/firezone/firezone">Firezone</a> is a Linux package to manage your WireGuard VPN and Linux firewall from a simple web interface.</p>
        <h3>PiVPN</h3>
        <p><a href="https://www.pivpn.io/">PiVPN</a> is an absolutely simple deployment and management script for
        Wireguard, well suited for a Raspberry Pi and other light weight deployments, with its simplicity
        taking after that of the <a href="https://pi-hole.net/">Pi-Hole</a> project.</p>
        <h3>Algo by Trail of Bits</h3>
        <p><a href="https://github.com/trailofbits/algo">Algo</a> is a set if Ansible deployment scripts for building a
        personal Wireguard (or IPsec) VPN with support for many common cloud providers.</p>
        <h2>Personal Uses</h2>
        <p>My most recent uses of Wireguard is with a non-forwarded client setup, creating a loose mesh network for devices on different LANs to communicate; and in some cases using a Nginx reverse proxy on the Wireguard VPN server to expose internal web applications to the internet.</p>
        <p>Aside from a standard VPN or the above mesh, I've found that Wireguard works exceptionally on my
        phone. I can switch between cellular and WiFi without any noticed drops. And with mobile carriers
        getting heavy handed with &quot;anonymized&quot; data collection, ads, and apps heavy with telemetry;
        having an always on Wireguard VPN with Pi-Hole serving up DNS for the clients, I can audit and
        block access to unwanted resources.</p>
        ]]>
      </content:encoded>
      <pubDate>Wed, 31 Mar 2021 02:12:25 GMT</pubDate>
    </item>
    <item>
      <title>Email Security</title>
      <link>http://localhost:3000/posts/email-security/</link>
      <guid isPermaLink="false">http://localhost:3000/posts/email-security/</guid>
      <description/>
      <content:encoded>
        <![CDATA[<p>This post started as a quick note for securing email for unused domains but I decided I could expand upon it a bit more to define terms in a language I believe to be more clear than I've seen elsewhere, and from the view-point of an administrator or domain owner.</p>
        <h2>Index</h2>
        <ul>
        <li><a href="http://localhost:3000/posts/email-security/#spf">SPF</a></li>
        <li><a href="http://localhost:3000/posts/email-security/#dmarc">DMARC</a></li>
        <li><a href="http://localhost:3000/posts/email-security/#dkim">DKIM</a></li>
        <li><a href="http://localhost:3000/posts/email-security/#securing-unused-domains">Securing Unused Domains</a></li>
        <li><a href="http://localhost:3000/posts/email-security/#additional-resources">Additional Resources</a></li>
        </ul>
        <h2>SPF</h2>
        <p>Sender Policy Framework (<a href="https://www.dmarcanalyzer.com/spf/">SPF</a>) is a method for defining domains or ips that are allowed to send email for your domain. When an email server recieves an email from your domain it will check for SPF records for your domain to confirm that the sender was authorized.</p>
        <p>SPF records are often used to prevent anyone from spoofing emails from your domain, while allowing specific services to send emails on your behalf (think marketing services, zendesk, salesforce).</p>
        <h3>Example</h3>
        <pre><code>hostname    value
        --------    -----
        @           v=spf1 ip4:182.4.35.44 include:3rdpartymail.com -all
        </code></pre>
        <h3>Explanation</h3>
        <p>Since SPF records are just text records defined for the root of the domain, they are defined with <code>v=sfp1</code> (v as in variable). <code>ip4</code> and <code>include:</code> are fairly straight forward just approved senders. The <code>all</code> flag defines how failures happen; <code>-all</code> is a 'hard' failure to reject failures, <code>~all</code> is a 'softfail' allowing emails to be accepted but flagged.</p>
        <h2>DMARC</h2>
        <p>Domain-based Message Authentication, Reporting, and Conformance (<a href="https://mxtoolbox.com/dmarc/details/what-is-a-dmarc-record">DMARC</a>) is another method for defining send authority for your domain, but provides control over what happens with authentication fails (quarantine or reject) as well as being able to receive email reports for message failures.</p>
        <pre><code>hostname    value
        --------    -----
        _dmarc.           v=DMARC1; p=reject; rua=mailto:admin@example.com;
        
        </code></pre>
        <h3>Explanation</h3>
        <p>The above record ensures that email recipients will <code>reject</code> any emails that fail validation (<code>quarantine</code> or <code>none</code> being the alternatives) and <code>rua</code> (report email address) ensures that each failure is reported to admin@example.com.</p>
        <h2>DKIM</h2>
        <p>Domain Keys Identified Mail (<a href="https://postmarkapp.com/guides/dkim">DKIM</a>) provides further sender authentication to your domain through the use of public-key cryptography. When you send an email from your domain, the email will be signed by your server, and when the receiving server gets your email it will validate the signed email using the public key defined in your domain's DKIM TXT record. <em>This signing method isn't used for encrypting your messages, only domain sender verification</em>.</p>
        <pre><code>hostname                            value
        --------                            -----
        specific._domainkey.domain.com      v=DKIM1; k=rsa; p=MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCS
        </code></pre>
        <h3>Explanation</h3>
        <p>In the above, the hostname is specific to the configuration of DKIM for your domain, and the <code>_domainkey</code> is required for discovery. As before, <code>v</code> defines the TXT value as DKIM version 1. <code>k</code> is short for key, defined above as an RSA key. <code>p</code> is the RSA public key contents (the above was truncated for brevity).</p>
        <h2>Securing Unused Domains</h2>
        <p>If you're a hoarder of domains like I am, you'll often have domains with no custom records or default registrar records. Neither of which are particularly protected from spam and phishing attackers. Below I document the bare minimum for preventing spam or phishing using your domain.</p>
        <pre><code>hostname    value
        --------    -----
        @           v=spf1 -all
        _dmarc.     v=DMARC1; p=reject;
        </code></pre>
        <p>The above settings set a hardfail for SPF with no approved senders, essentially invalidating emails sent from your domain. Next, it defines DMARC with a policy of <code>reject</code>. If you want to receive reports for rejected emails, you can add <code>rua=mailto:youremail@domain.com;</code> to the above dmarc value string.</p>
        <h2>Additional Resources</h2>
        <p>The following are recommended resources for reading up on email security features and protecting your domain's email.</p>
        <ul>
        <li><a href="https://www.upguard.com/blog/the-email-security-checklist">UpGuard - The Email Security Checklist</a></li>
        <li><a href="https://www.gov.uk/guidance/set-up-government-email-services-securely">UK Gov - Set up government email services securely</a></li>
        </ul>
        ]]>
      </content:encoded>
      <pubDate>Sat, 30 Jan 2021 20:42:21 GMT</pubDate>
    </item>
  </channel>
</rss>